syntax = "proto3";

package agentgateway.dev.mcp.target;

option go_package = "github.com/agentgateway/agentgateway/go/api/mcp;mcp";

import "common.proto";
import "google/protobuf/empty.proto";

message Target {
  // The name of the target.
  string name = 1;

  // The listeners which are allowed to connect to the target.
  repeated string listeners = 2;

  oneof target {
    SseTarget sse = 3;
    OpenAPITarget openapi = 4;
    StdioTarget stdio = 5;
    McpProxyTarget mcp_proxy = 6;
  }

  message Filter {
    enum Matcher {
      EQUALS = 0;
      PREFIX = 1;
      SUFFIX = 2;
      CONTAINS = 3;
      REGEX = 4;
    }

    string match = 1;
    
    Matcher matcher = 2;
    // The type of the resource that the filter applies to.
    // For MCP, the supported types are:
    // - tool
    // - prompt
    // - resource
    // If empty, it will match any type.
    string type = 3;
  }

  // The filters which are applied to the target.
  // If empty, all resources will be allowed.
  // All filters will be ORed together.
  // If any filter matches, then the resource will not be filtered.
  repeated Filter filters = 7;


  message SseTarget {
    // The host of the target.
    string host = 1;
    // The port of the target.
    uint32 port = 2;
    // The path of the target.
    string path = 3;
    // The headers of the target.
    repeated agentgateway.dev.common.Header headers = 4;

    agentgateway.dev.common.BackendAuth auth = 5;

    agentgateway.dev.common.BackendTls tls = 6;
  }

  message StdioTarget {
    // The command of the target.
    string cmd = 1;
    // The arguments of the target.
    repeated string args = 2;
    // The environment variables of the target.
    map<string, string> env = 3;
  }

  message OpenAPITarget {
    // The host of the target.
    string host = 1;
    // The port of the target.
    uint32 port = 2;

    oneof schema_source {
      // The local schema of the target.
      agentgateway.dev.common.LocalDataSource schema = 3;
      // The remote schema of the target.
      agentgateway.dev.common.RemoteDataSource remote_schema = 7;
    }

    agentgateway.dev.common.BackendAuth auth = 4;

    agentgateway.dev.common.BackendTls tls = 5;

    repeated agentgateway.dev.common.Header headers = 6;
  }

  message McpProxyTarget {
    // The command of the mcp-proxy.
    string cmd = 1;
    // The arguments for the command to be run by mcp-proxy.
    repeated string args = 2;
  }
}

